/*
 * This file is generated by jOOQ.
 */
package org.vaadin.erik.data.generated.jooq.public_.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vaadin.erik.data.generated.jooq.public_.Keys;
import org.vaadin.erik.data.generated.jooq.public_.Public;
import org.vaadin.erik.data.generated.jooq.public_.tables.records.PersonRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.PERSON</code>
     */
    public static final Person PERSON = new Person();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>PUBLIC.PERSON.ID</code>.
     */
    public final TableField<PersonRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PERSON.DATE_OF_BIRTH</code>.
     */
    public final TableField<PersonRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("DATE_OF_BIRTH"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.PERSON.EMAIL</code>.
     */
    public final TableField<PersonRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.PERSON.FIRST_NAME</code>.
     */
    public final TableField<PersonRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.PERSON.IMPORTANT</code>.
     */
    public final TableField<PersonRecord, Boolean> IMPORTANT = createField(DSL.name("IMPORTANT"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PERSON.LAST_NAME</code>.
     */
    public final TableField<PersonRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.PERSON.OCCUPATION</code>.
     */
    public final TableField<PersonRecord, String> OCCUPATION = createField(DSL.name("OCCUPATION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.PERSON.PHONE</code>.
     */
    public final TableField<PersonRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(255), this, "");

    private Person(Name alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Person(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.PERSON</code> table reference
     */
    public Person(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>PUBLIC.PERSON</code> table reference
     */
    public Person(Name alias) {
        this(alias, PERSON);
    }

    /**
     * Create a <code>PUBLIC.PERSON</code> table reference
     */
    public Person() {
        this(DSL.name("PERSON"), null);
    }

    public <O extends Record> Person(Table<O> child, ForeignKey<O, PersonRecord> key) {
        super(child, key, PERSON);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<PersonRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public Person as(String alias) {
        return new Person(DSL.name(alias), this);
    }

    @Override
    public Person as(Name alias) {
        return new Person(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(String name) {
        return new Person(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(Name name) {
        return new Person(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDate, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
